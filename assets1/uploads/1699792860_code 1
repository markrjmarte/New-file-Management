private void calculateTransitTime() throws Exception {
        //Lets do transit here
        //{#TRANSIT-1}
        //NEW TRANSIT TIME
        //System.out.println("Start Transit");
        if (mainRequest.getApp_user().getShowTransit()) {
            if (mainRequest.getRequest_shipment_size().contains("AIR")) {
                //transit t=new transit();
                //t.getAirSchedules(mainResponse);
                if (mainRequest.getApp_user().getOag_api() == 1) {
                    OagAirService service = new OagAirService();
                    service.getAirSchedules(mainResponse);
                }
            } else {
                try {
                    //put together origin text in
                    String tOriginIn = "(";
                    if (locationMap.get("O") != null) {
                        for (String o : locationMap.get("O")) {
                            tOriginIn += "'" + o + "',";
                        }
                        tOriginIn += ")";
                        tOriginIn = tOriginIn.replace(",)", ")");
                    } else {
                        tOriginIn = "('')";
                    }
                    //put together destiantion text in
                    String tDestinationIn = "(";
                    if (locationMap.get("D") != null) {
                        for (String d : locationMap.get("D")) {
                            tDestinationIn += "'" + d + "',";
                        }
                        tDestinationIn += ")";
                        tDestinationIn = tDestinationIn.replace(",)", ")");
                    } else {
                        tDestinationIn = "('')";
                    }
                    //put together origin via text in
                    String tOriginViaIn = "(";
                    if (locationMap.get("OV") != null) {
                        for (String ov : locationMap.get("OV")) {
                            tOriginViaIn += "'" + ov + "',";
                        }
                        tOriginViaIn += ")";
                        tOriginViaIn = tOriginViaIn.replace(",)", ")");
                    } else {
                        tOriginViaIn = "('')";
                    }
                    //put together destiantion via text in
                    String tDestinationViaIn = "(";
                    if (locationMap.get("DV") != null) {
                        for (String dv : locationMap.get("DV")) {
                            tDestinationViaIn += "'" + dv + "',";
                        }
                        tDestinationViaIn += ")";
                        tDestinationViaIn = tDestinationViaIn.replace(",)", ")");
                    } else {
                        tDestinationViaIn = "('')";
                    }
                    //put together carrier text in
                    String tCarrierIn = "(";
                    for (String c : carrierMap) {
                        tCarrierIn += "'" + c + "',";
                    }
                    tCarrierIn += ")";
                    tCarrierIn = tCarrierIn.replace(",)", ")");

                    //call the transit method
                    transit transitEngine = new transit();
                    //call the inland method
                    //lets see if we can cache our results
                    String internationalTransitKey = "TT15-INT-" + tOriginIn + "-" + tDestinationIn + "-" + tCarrierIn;

                    HashSet<String> inlandReturn = new HashSet<String>();
                    ArrayList<sailingSchedule> schedules = new ArrayList<sailingSchedule>();
//                    if (cc != null && cc.getTransitCache(internationalTransitKey) != null && !cc.getTransitCache(internationalTransitKey).isEmpty()) {
//                        schedules = cc.getTransitCache(internationalTransitKey);
//                    } else {
                        schedules = transitEngine.odLookupTarisogaSA_new(tOriginIn, tDestinationIn, tCarrierIn, mainRequest.getShipmentDate());
//                        if (cc != null) {
//                            cc.setTransitCache(internationalTransitKey, schedules);
//                        }
//                    }
                    inlandReturn = transitEngine.getInlandBDPTransitSA(tOriginIn, tOriginViaIn, tDestinationIn, tDestinationViaIn);

                    //parse the quotes and apply the shipquotes to the return
                    for (ShipQuote s : mainResponse) {
                        if (!isRateFromThirdPartyApi(s)) {
                            ArrayList<sailingSchedule> scheduleList = new ArrayList<>();
                            s.setSailingScheduleObject(scheduleList);
                        double transit = 0.0;
                        int transitCount = 0;
                        int transitLow = 100;
                        for (sailingSchedule ss : schedules) {
                            if ((ss.getOrigin_code().equalsIgnoreCase(s.getOrigin_code()) || ss.getOrigin_code().equalsIgnoreCase(s.getOrigin_via_code()))
                                    && (ss.getDestination_code().equalsIgnoreCase(s.getDestination_code()) || ss.getDestination_code().equalsIgnoreCase(s.getDestination_via_code()))
                                    && ss.getScac().equalsIgnoreCase(s.getScac())) {
//                                ss.setDeparture(s.getOrigin_city());
//                                ss.setArrival(s.getDestination_city());
                                if (s.getSailingScheduleObject() != null) {
                                    s.getSailingScheduleObject().add((sailingSchedule) ss.clone());
                                } else {
                                    ArrayList<sailingSchedule> tSchedules = new ArrayList<sailingSchedule>();
                                    s.setSailingScheduleObject(tSchedules);
                                    s.getSailingScheduleObject().add((sailingSchedule) ss.clone());
                                }
                                transit += ss.getTransit();
                                transitCount++;
                                if (ss.getTransit() < transitLow) {
                                    transitLow = ss.getTransit();
                                }
                            }

                        }//end loop through schedules

                        //loop through the inland returns and add them up as well
                        for (String sKey : inlandReturn) {
                            String[] tSplit = sKey.split("-");
                            boolean addOInland = false;
                            boolean addDInland = false;
                            int inlandTransit = Integer.parseInt(tSplit[2]);
                            if ((tSplit[0].equalsIgnoreCase(s.getOrigin_code()) && tSplit[1].equalsIgnoreCase(s.getOrigin_via_code()))
                                    || (tSplit[1].equalsIgnoreCase(s.getOrigin_code()) && tSplit[0].equalsIgnoreCase(s.getOrigin_via_code()))) {
                                addOInland = true;
                            }
                            if ((tSplit[0].equalsIgnoreCase(s.getDestination_code()) && tSplit[1].equalsIgnoreCase(s.getDestination_via_code()))
                                    || (tSplit[1].equalsIgnoreCase(s.getDestination_code()) && tSplit[0].equalsIgnoreCase(s.getDestination_via_code()))) {
                                addDInland = true;
                            }
                            if (addOInland || addDInland) {
                                if (s.getSailingScheduleObject() != null) {
                                    for (sailingSchedule tss : s.getSailingScheduleObject()) {
                                        if (addOInland) {
                                            tss.setDomestic_inland_transit(inlandTransit);
                                        } else if (addDInland) {
                                            tss.setInland_transit(inlandTransit);
                                        }
                                    }
                                }
                            }//end if we are even going to add origin or destination 
                        }//end loop through the inland returns
                        String transitString = "";
                        if (s.getSailingScheduleObject() != null && !s.getSailingScheduleObject().isEmpty()
                                && !ApiUtils.isRateFromThirdPartyApi(s)) {
                            if (s.getSailingScheduleObject().size() > 1) {
                                transitString = "+";
                            }
                            transit /= s.getSailingScheduleObject().size();
                            transit += s.getSailingScheduleObject().get(0).getDomestic_inland_transit() + s.getSailingScheduleObject().get(0).getInland_transit();
                            transitLow += s.getSailingScheduleObject().get(0).getDomestic_inland_transit() + s.getSailingScheduleObject().get(0).getInland_transit();
						} else if (ApiUtils.isRateFromThirdPartyApi(s)) {
                            //RC 2/9/2017: Keep the origin transit time from Carotrans API response
                            //JJUMANGIT 11/10/2019: Keep the origin transit time from Maersk Spot API response
                            //jferrer 1/29/2021: Keep transit from evergreen api repsonse
                            if (StringUtils.isNumeric(s.getTransit())) {
                                transit = NumberUtil.parseDouble(s.getTransit());
                                transitLow = new Double(round(transit, 0)).intValue();
                            } else {
                                transit = 0d;
                                transitLow = 0;
                            }
                        } else {
                            transit = 0.00;
                        }
                      //[QMS3][QMS-8652] add checking if from cargoAIApi not replace transit
                        boolean isRateFromCargoAiAPI = ApiUtils.isRateFromCargoAiAPI(s);
                        if(!isRateFromCargoAiAPI){
                            s.setTransit(String.valueOf(round(transitLow, 0)).replace(".0", "") + transitString);
                        }

                        if (transit <= 0.00 && !isRateFromCargoAiAPI) {
                            s.setTransit("N/A");
                        }

                        s.setTransit(String.valueOf(round(transitLow, 0)).replace(".0", "") + transitString);

                        if (transit <= 0.00) {
                            s.setTransit("N/A");
                        }
                        if (s.getTemplateTransit() != null && s.getTemplateTransit().length() > 0
                                && !s.getTemplateTransit().equalsIgnoreCase("0") && !s.getTemplateTransit().equalsIgnoreCase("")) {
                            s.setTransit(s.getTemplateTransit());
                        }//end set the template transit if found and has a real value
                        
                        }
                    }//end loop through main response
                } catch (Exception e) {
                    e.printStackTrace();
                }//end catch for transit block of code
            }
        }//end if transit is turned on
        //END NEW TRANSIT TIME
        //{/TRANSIT-1}
        //System.out.println("End Transit");
        //End Transit
    }